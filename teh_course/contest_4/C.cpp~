#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <iostream>
#include <cassert>
#include <cmath>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <cstdlib>

using namespace std;

#define INF 1e+9
#define mp make_pair
#define pb push_back
#define fi first
#define fs first
#define se second
#define i64 long long
#define li long long
#define lint long long
#define pii pair<int, int>
#define vi vector<int>

#define forn(i, n) for (int i = 0; i < (int)n; i++)
#define fore(i, b, e) for (int i = (int)b; i <= (int)e; i++)


const int MOD = 1e9+7;
const int maxn = 2005;

typedef pair <i64, int> mypair;


struct Point
{
    int x, y, w;
    Point(){}
    Point(int _x, int _y, int _w) : x(_x), y(_y), w(_w) {}
    void print()
    {
        printf("Point x = %d  y = %d w = %d\n", x, y, w);
    }
};

struct Dir
{
    int x, y;
    Dir(pii p) : x(p.fi), y(p.se) {}
};


Point p[maxn];
i64 two[maxn];
int n;
i64 answer;
i64 precalced[maxn][maxn];

inline i64 crossp(Dir fr, Dir to)
{
    return (i64)fr.x * to.y - (i64)fr.y * to.x;
}

inline bool get_half(Dir p)
{
    return !(p.y > 0 || (p.y == 0 && p.x >= 0));
}

inline bool operator < (Dir first, Dir second)
{
    bool half1 = get_half(first);
    bool half2 = get_half(second);
    if (half1 != half2)
        return !half1;
    return crossp(first, second) > 0;
}


inline Dir get(Point & fr, Point & to)
{
    return Dir(mp(to.x - fr.x, to.y - fr.y));
}

inline i64 sqrlen(Dir p)
{
    return (i64)p.x * p.x + (i64)p.y * p.y;
}


inline int get_total_size(vector < mypair> & v)
{
    int res = 0;
    for (auto elem : v)
        res += elem.se;
    return res;
}

void precalc()
{
    two[0] = 1;
    fore(i, 1, n)
        two[i] = two[i - 1] * 2 % MOD;
    fore(i, 0, n)
        fore(j, 0, n)
            precalced[i][j] = (two[i] - 1 + MOD) * (two[j] - 1 + MOD) % MOD;
}

int main() {
    int start_time = clock();
#ifdef LOCAL
    freopen("inp", "r", stdin);
    //freopen("outp", "w", stdout);
#else
    // freopen(TASKNAME ".in", "r", stdin);
    // freopen(TASKNAME ".out", "w", stdout);
#endif
    scanf("%d", &n);
    precalc();
    map <pii, int> cnt_map;
    forn(j, n)
    {
        pii p;
        scanf("%d%d", &p.fi, &p.se);
        cnt_map[p]++;
    }
//    int n1 = n;
    n = 0;
    for (auto elem : cnt_map)
    {
        p[n++] = Point(elem.fi.fi, elem.fi.se, elem.se);
        //p[n - 1].print();
    }
    forn(i, n)
    {
        map <Dir, vector <mypair >> M;
        forn(j, n) if (i != j)
        {
            Dir v = get(p[i], p[j]);
            i64 sqrl = sqrlen(v);
            M[Dir(v)].pb(mp(sqrl, p[j].w));
            Dir rev = mp(-v.x, -v.y);
            M[rev].size();
        }
        int S1 = 0;
        int S2 = 0;
        Dir v1 = M.begin()->fi;
        //printf("v1 = %d %d\n", v1.x, v1.y);
        forn(j, n) if (i != j)
        {
            Dir v = get(p[i], p[j]);
            i64 cp = crossp(v, v1);
            if (cp > 0)
                S1 += p[j].w;
            else if (cp < 0)
                S2 += p[j].w;
        }
        //printf("start S1 = %d S2 = %d\n", S1, S2);
        bool starting_flag = true;
        for (auto iter = M.begin(); iter != M.end(); iter++)
        {
            Dir vect = iter->fi;
            if (get_half(vect) == 1)
                break;
            //printf("vect = %d %d\n", vect.x, vect.y);
            sort(iter->se.begin(), iter->se.end());

            int list_size = get_total_size(iter->se);
            Dir rev = Dir(mp(-vect.x, -vect.y));
            int rev_size = (M.find(rev) == M.end() ? 0 : get_total_size(M[rev]));
            //printf("sizes: %d %d\n", list_size, rev_size);

            if (!starting_flag)
            {
                S2 -= list_size;
                S1 -= rev_size;
            }

            int additional = 0;
//            printf("S1 = %d S2 = %d\n", S1, S2);

            /*int trueS1 = 0;
            int trueS2 = 0;
            forn(h, n)
            {
                Dir tmp = get(p[i], p[h]);
                if (crossp(tmp, vect) > 0)
                    trueS1 += p[h].w;
                else if (crossp(tmp, vect) < 0)
                    trueS2 += p[h].w;
            }
            assert(trueS1 == S1 && trueS2 == S2);*/
            i64 S1_not_empty = two[S1] - 1 + MOD;
            i64 S2_not_empty = two[S2] - 1 + MOD;
            i64 con = S1_not_empty + S2_not_empty + 2;

            for (auto chosen : iter->se)
            {
                answer += precalced[p[i].w][chosen.se] * two[additional] % MOD * con % MOD;
                
                additional += chosen.se;
            }
            S1 += list_size;
            S2 += rev_size;
            starting_flag = false;
        }
    }

    //cout << answer << endl;
    forn(j, n)
        answer += two[p[j].w] - 1;
    cout << answer % MOD << endl;
    //printf("time = %d\n", (int)clock() - start_time);
}
