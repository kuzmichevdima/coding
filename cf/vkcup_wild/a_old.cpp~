#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>
#include <iostream>
#include <cassert>
#include <cmath>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <cstdlib>

using namespace std;

#define INF 1e+9
#define mp make_pair
#define pb push_back
#define fi first
#define fs first
#define se second
#define i64 long long
#define li long long
#define lint long long
#define pii pair<int, int>
#define vi vector<int>

#define forn(i, n) for (int i = 0; i < (int)n; i++)
#define fore(i, b, e) for (int i = (int)b; i <= (int)e; i++)

const int maxp = 10005;

queue <int> Q;

vi taskForSol;
vi leftBound;
vi rightBound;
vi border;

vector <set <int> > tested;

int tests[maxp];
int TL[maxp];
int solCnt;
int t, p;
//inProcess;

void readSolutions() {
    while(true) {
        int x;
        scanf("%d", &x);
        if (x == -1)
            break;
        cerr << "new sol for task " << x << endl;
        solCnt++;
        taskForSol.pb(x);
        leftBound.pb(0);
        rightBound.pb(tests[x]);
        Q.push(solCnt - 1);
        border.pb(-1);
        set <int> new_set;
        tested.pb(new_set);

        //inProcess++;
    }
}

void readResults() {
    while(true) {
        int sol, test;
        scanf("%d%d", &sol, &test);
        if (sol == -1 && test == -1)
            break;
        cerr << "new result for sol " << sol << " test = " << test << " border[sol] = " << border[sol] << endl;
        string verdict;
        cin >> verdict;
        t++;
        
        if (border[sol] == -1) {
            if (verdict == "OK") {
                leftBound[sol] = test + 1;
            } else {
                rightBound[sol] = test;
            }
            if (leftBound[sol] != rightBound[sol]) {
                cerr << "insert in Q sol = " << sol << endl;
            } else {
                border[sol] = leftBound[sol];
            }
        }
        Q.push(sol);
    }
}

void queries() {
    cerr << "queries t = " << t << endl;
    while(t > 0 && !Q.empty()) {
        int sol = Q.front();
        cerr << "sol = " << sol << endl;
        Q.pop();
        if (border[sol] == -1) {
            t--;
            int middle = (leftBound[sol] + rightBound[sol]) / 2;
            tested[sol].insert(middle);
            printf("%d %d\n", sol, middle);
        } else {
            forn(number, border[sol]) if (tested[sol].find(number) == tested[sol].end()) {
                t--;
                tested[sol].insert(number);
                printf("%d %d\n", sol, number);
                break;
            }
        }
    }
    printf("-1 -1\n");
    fflush(stdout);
}

int main() {
    scanf("%d%d", &t, &p);
    forn(j, p)
        scanf("%d%d", &TL[j], &tests[j]);
    while(true) {
        if (cin.eof())
            exit(0);
        readSolutions();
        readResults();
        queries();
    }
}

